<div class="beta-tester" id="banner" hidden="true">
            <div class="beta-tester__banner">
                <form id="beta-tester-form--hidden" name="beta-tester-form" 
                method="POST" action="https://formspree.io/f/mlearavn" class="beta-tester__form--hidden">
                    <input type="hidden" name="adminEmail" value="<?php $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
    $scopeConfig = $objectManager->create('\Magento\Framework\App\Config\ScopeConfigInterface');
    $email = $scopeConfig->getValue('trans_email/ident_support/email',\Magento\Store\Model\ScopeInterface::SCOPE_STORE); echo $email ?>">
                    <input type="hidden" name="platform" value="magento">
                    <input type="hidden" name="action" value="I am not interested">
                    <button type="submit"  class="beta-tester__cancel" 
                    onclick="document.cookie='beta_testing_answered_v=true; max-age=1209600'">X</button>
                </form>
                <h2 class="beta-tester__heading" 
                style="display: block; margin: 0 auto 34px; color: #fff; width: 80%; 
                text-align: center; line-height: 2;"
                >Become MySI Beta tester and get <span>3-month free access</span> to multiple 
                market places <br>(Bidorbuy, Google, Takealot, etc),<br> easy category mapping, regular 
                automatic pricing/inventory updates</h2>
                <button id="banner-inner" class="beta-tester__submit">Submit</button>
            </div>
            <div id="beta-tester__form-wrapper" class="beta-tester__form-wrapper" hidden="true">
                <form name="beta-tester-form" id="beta-tester-form" method="POST" 
                action="https://formspree.io/f/mlearavn" class="beta-tester__form">
                    <div class="beta-tester__form-wrap">
                        <div class="beta-tester__form-inner-wrapper">
                            <div class="beta-tester__input-wrapper">
                                <label class="beta-tester__label" for="name">
                                    Name
                                </label>
                                <input required type="text" class="beta-tester__input" name="name" 
                                id="name" placeholder="Enter your name">
                            </div>
                            <div class="beta-tester__input-wrapper">
                                <label class="beta-tester__label" for="email">
                                    Email
                                </label>
                                <input required type="email" class="beta-tester__input" name="email" 
                                id="email" placeholder="Enter your email">
                            </div>
                            <!-- <div class="beta-tester__form-inner-wrapper"> -->
                                <div class="beta-tester__input-wrapper">
                                    <label class="beta-tester__label" for="phone">
                                        Phone
                                    </label>
                                    <input required type="text" class="beta-tester__input" name="phone" 
                                    id="phone" placeholder="Enter your phone">
                                </div>
                                <input type="hidden" class="beta-tester__input" name="products" 
                                id="products" placeholder="Enter number of products">
                                <input type="hidden" name="platform" value="magento">
                                <!-- </div> -->
                        </div>

                    </div>
                    <button type="submit" class="beta-tester__link beta-tester__submit" 
                    onclick="document.cookie='beta_testing_answered_v=true; max-age=5184000'">Send</button>
                </form>
                <div class="beta-tester__buttons-wrapper" id="buttons-wrapper">
                            <a href="https://www.mysi.app/" target="_blank" 
                            class="beta-tester__link beta-tester__info">Learn more</a>
                            <!-- <a href="https://www.mysi.app/contact-us/" target="_blank" 
                            class="beta-tester__link beta-tester__contact">Contact us</a> -->
                        <form id="beta-tester-form--hidden" name="beta-tester-form" method="POST" 
                        action="https://formspree.io/f/mlearavn" class="beta-tester__form--hidden">
                            <input type="hidden" name="adminEmail" value="<?php $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
    $scopeConfig = $objectManager->create('\Magento\Framework\App\Config\ScopeConfigInterface');
    $email = $scopeConfig->getValue('trans_email/ident_support/email',\Magento\Store\Model\ScopeInterface::SCOPE_STORE); echo $email ?>">
                            <input type="hidden" name="platform" value="magento">
                            <input type="hidden" name="action" value="I am not interested">
                            <button class="beta-tester__link beta-tester__dismiss" 
                            onclick="document.cookie='beta_testing_answered_v=true; max-age=1209600'"
                            >Iâ€™m not interested</button>
                        </form>
                </div>
            </div>
        </div>

<input type="hidden" name="groups[exportCriteria][fields][excludeCategories][value]"
       id="bidorbuystoreintegrator_exportCriteria_excludeCategories"
       value="<?php echo $block->getIdsString() ?>"/>
<div id="product-categories" class="tree"></div>

<script>
    require([
        'jquery',
        "prototype",
        "extjs/ext-tree-checkbox",
        "mage/adminhtml/form"
    ], function (jQuery) {
        Ext.EventManager.onDocumentReady(function () {
            var categoryLoader = new Ext.tree.TreeLoader({
                dataUrl: '<?php echo $block->getLoadTreeUrl() ?>'
            });

            categoryLoader.createNode = function (config) {
                config.uiProvider = Ext.tree.CheckboxNodeUI;
                var node;
                if (config.children && !config.children.length) {
                    delete(config.children);
                    node = new Ext.tree.AsyncTreeNode(config);

                } else {
                    node = new Ext.tree.TreeNode(config);
                }
                return node;
            };

            categoryLoader.on("beforeload", function (treeLoader, node) {
                treeLoader.baseParams.category = node.attributes.id;
            });

            categoryLoader.on("load", function (treeLoader, node, config) {
                varienWindowOnload();
            });

            var tree = new Ext.tree.TreePanel('product-categories', {
                animate: true,
                loader: categoryLoader,
                enableDD: false,
                containerScroll: true,
                rootUIProvider: Ext.tree.CheckboxNodeUI,
                selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
                rootVisible: true
            });

            tree.on('check', function (node) {
                if (node.attributes.checked) {
                    categoryAdd(node.id);
                } else {
                    categoryRemove(node.id);
                }
                varienElementMethods.setHasChanges(node.getUI().checkbox);
            }, tree);

            var checkedRoot = '<?php echo $block->getIdsString() ?>'.split(',').indexOf('0') != -1;

            // set the root node
            var root = new Ext.tree.TreeNode({
                text: 'Uncategorized',
                draggable: false,
                checked: checkedRoot,
                id: '0',
                disabled: false,
                uiProvider: Ext.tree.CheckboxNodeUI
            });

            tree.setRootNode(root);
            buildCategoryTree(root, <?php echo $block->getTreeJson() ?>);
            tree.addListener('click', categoryClick.createDelegate(this));

            // render the tree
            tree.render();
            root.expand();
            //tree.expandAll();
        });

        function buildCategoryTree(parent, config) {
            if (!config) return null;

            if (parent && config && config.length) {
                for (var i = 0; i < config.length; i++) {
                    config[i].uiProvider = Ext.tree.CheckboxNodeUI;
                    var node;
                    var _node = Object.clone(config[i]);
                    if (_node.children && !_node.children.length) {
                        delete(_node.children);
                        node = new Ext.tree.AsyncTreeNode(_node);

                    } else {
                        node = new Ext.tree.TreeNode(config[i]);
                    }
                    parent.appendChild(node);
                    node.loader = node.getOwnerTree().loader;
                    if (config[i].children) {
                        buildCategoryTree(node, config[i].children);
                    }
                }
            }
        }

        function categoryClick(node, e) {
            if (node.disabled) {
                return;
            }
            node.getUI().check(!node.getUI().checked());
            varienElementMethods.setHasChanges(Event.element(e), e);
        }
        ;

        function categoryAdd(id) {
            var ids = $('bidorbuystoreintegrator_exportCriteria_excludeCategories').value.split(',');
            if (-1 == ids.indexOf(id) && id != 1) ids.push(id);
            $('bidorbuystoreintegrator_exportCriteria_excludeCategories').value = ids.join(',');
        }

        function categoryRemove(id) {
            var ids = $('bidorbuystoreintegrator_exportCriteria_excludeCategories').value.split(',');
            // bug #7654 fixed
            while (-1 != ids.indexOf(id)) {
                ids.splice(ids.indexOf(id), 1);
            }
            $('bidorbuystoreintegrator_exportCriteria_excludeCategories').value = ids.join(',');
        }
    });

    function getCookie(name) {
                let matches = document.cookie.match(new RegExp(
                "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
                ));
                    return matches ? decodeURIComponent(matches[1]) : undefined;
            };
            const dismissCookie = getCookie('beta_testing_answered_v');
                const banner = document.querySelector('#banner');
                const formWrapper = document.querySelector('#beta-tester__form-wrapper');
                const bannerInner = document.querySelector('#banner-inner');

                const openForm = () => {
                    formWrapper.removeAttribute('hidden');
                    formWrapper.style.display = 'flex';
                };

                bannerInner.addEventListener('click', openForm)

                if (dismissCookie) {
                    banner.setAttribute('hidden', true);
                } else {
                    banner.removeAttribute('hidden');
                }
</script>